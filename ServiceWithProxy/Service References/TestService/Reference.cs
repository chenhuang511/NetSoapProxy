//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceWithProxy.TestService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestService.IServices")]
    public interface IServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/Process", ReplyAction="http://tempuri.org/IServices/ProcessResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        ServiceWithProxy.TestService.ProcessResponse Process(ServiceWithProxy.TestService.ProcessRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/Process", ReplyAction="http://tempuri.org/IServices/ProcessResponse")]
        System.Threading.Tasks.Task<ServiceWithProxy.TestService.ProcessResponse> ProcessAsync(ServiceWithProxy.TestService.ProcessRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Process", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ProcessRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string token;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string userId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string serviceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string functionCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string inputParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public byte[] fileAttachment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public object[] outputVal;
        
        public ProcessRequest() {
        }
        
        public ProcessRequest(string token, string userId, string password, string serviceId, string functionCode, string inputParams, byte[] fileAttachment, object[] outputVal) {
            this.token = token;
            this.userId = userId;
            this.password = password;
            this.serviceId = serviceId;
            this.functionCode = functionCode;
            this.inputParams = inputParams;
            this.fileAttachment = fileAttachment;
            this.outputVal = outputVal;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ProcessResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ProcessResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string ProcessResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public object[] outputVal;
        
        public ProcessResponse() {
        }
        
        public ProcessResponse(string ProcessResult, object[] outputVal) {
            this.ProcessResult = ProcessResult;
            this.outputVal = outputVal;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicesChannel : ServiceWithProxy.TestService.IServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicesClient : System.ServiceModel.ClientBase<ServiceWithProxy.TestService.IServices>, ServiceWithProxy.TestService.IServices {
        
        public ServicesClient() {
        }
        
        public ServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ServiceWithProxy.TestService.ProcessResponse ServiceWithProxy.TestService.IServices.Process(ServiceWithProxy.TestService.ProcessRequest request) {
            return base.Channel.Process(request);
        }
        
        public string Process(string token, string userId, string password, string serviceId, string functionCode, string inputParams, byte[] fileAttachment, ref object[] outputVal) {
            ServiceWithProxy.TestService.ProcessRequest inValue = new ServiceWithProxy.TestService.ProcessRequest();
            inValue.token = token;
            inValue.userId = userId;
            inValue.password = password;
            inValue.serviceId = serviceId;
            inValue.functionCode = functionCode;
            inValue.inputParams = inputParams;
            inValue.fileAttachment = fileAttachment;
            inValue.outputVal = outputVal;
            ServiceWithProxy.TestService.ProcessResponse retVal = ((ServiceWithProxy.TestService.IServices)(this)).Process(inValue);
            outputVal = retVal.outputVal;
            return retVal.ProcessResult;
        }
        
        public System.Threading.Tasks.Task<ServiceWithProxy.TestService.ProcessResponse> ProcessAsync(ServiceWithProxy.TestService.ProcessRequest request) {
            return base.Channel.ProcessAsync(request);
        }
    }
}
